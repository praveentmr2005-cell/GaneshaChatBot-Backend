# This file should be located at: main/tts.py
import google.generativeai as genai
import os
from dotenv import load_dotenv
import soundfile as sf
import numpy as np
import io

# --- Load environment variables from the project root .env file ---
# This is kept in case you want to switch back later.
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
dotenv_path = os.path.join(project_root, '.env')
load_dotenv(dotenv_path=dotenv_path)

# --- HARDCODED API KEY ---
# ‚ö†Ô∏è WARNING: For local testing only. Do not commit this key to version control.
API_KEY = os.getenv("GENAI_API_KEY_1")

# --- Configure the Gemini Client ---
# This now uses the hardcoded key.
try:
    if not API_KEY or API_KEY == "YOUR_GEMINI_API_KEY_HERE":
        raise ValueError("Please replace 'YOUR_GEMINI_API_KEY_HERE' with your actual API key.")
    genai.configure(api_key=API_KEY)
except Exception as e:
    print(f"Error configuring Gemini API: {e}")

def speak(text: str, lang: str = "en", output_path: str = "output.wav"):
    """
    Converts text to speech using the native Gemini TTS API and saves it to a file.

    Args:
        text (str): The text to be converted to speech.
        lang (str): The language code (e.g., 'en', 'hi'). The model auto-detects the language.
        output_path (str): The full path where the output .wav file will be saved.
    """
    try:
        print(f"üîä Sending text to Gemini TTS for language: '{lang}'...")

        # 1. Select the appropriate Gemini TTS model
        # --- FIX: Switched to the dedicated model for Text-to-Speech ---
        model = genai.GenerativeModel('gemini-2.5-flash-preview-tts')

        # 2. The prompt for this model is just the text to be spoken.
        #    You can add optional instructions like "Say cheerfully: ..."
        prompt = f"Speak the following text clearly and cheerfully: {text}"

        # 3. Configure the speech output
        # 'Iapetus' is a clear, standard male voice. You can choose others like 'Charon' or 'Fenrir'.
        generation_config = {
            "response_modalities": ["AUDIO"],
            "speech_config": {
                "voice_config": {
                    "prebuilt_voice_config": {"voice_name": "Schedar"}
                }
            }
        }

        # 4. Generate the audio content
        response = model.generate_content(
            prompt,
            generation_config=generation_config
        )

        # 5. The API returns raw signed 16-bit PCM audio data
        audio_data_bytes = response.candidates[0].content.parts[0].inline_data.data

        # 6. Convert the raw PCM bytes to a NumPy array for saving
        pcm_data = np.frombuffer(audio_data_bytes, dtype=np.int16)
        
        # 7. Save the audio data as a WAV file
        # The Gemini TTS API uses a 24000 Hz sample rate.
        sf.write(output_path, pcm_data, samplerate=24000)

        print(f"Audio successfully generated by Gemini TTS at: {output_path}")

    except Exception as e:
        print(f"An error occurred in Gemini TTS speak(): {e}")

if __name__ == "__main__":
    # Example usage for testing this file directly
    print("Running Gemini TTS test...")
    speak(
        "Om Gam Ganapataye Namaha Welcome to my divine presence. I am here to remove obstacles and guide you on your spiritual journey. You may speak to me or type your questions..",
        lang="en",
        output_path="test_output_gemini.wav"
    )
    print("Test complete. Check for 'test_output_gemini.wav'.")

